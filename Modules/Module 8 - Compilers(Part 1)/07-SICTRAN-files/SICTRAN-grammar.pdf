grammar SICTRAN;  // Simplified Instructional Computer TRANSlator

program  : stmtList ;
stmtList : stmt ( ';' stmt )* ;

stmt : assignmentStmt
     | ifStmt
     | whileStmt
     | printStmt
     | compoundStmt
     |
     ;
     
assignmentStmt : variable '=' intExpr ;
ifStmt         : IF '(' boolExpr ')' stmt ;
whileStmt      : WHILE '(' boolExpr ')' stmt ;
compoundStmt   : '{' stmtList '}' ;

printStmt : PRINT '(' printArg ')' ;

printArg  : variable  # printVar
          | STRING    # printStr
          |           # printLine
          ;

variable : IDENTIFIER ;

intExpr : intExpr mulDivOp intExpr   # mulDivExpr
        | intExpr addSubOp intExpr   # addSubExpr
        | number                     # unsignedNumberExpr
        | signedNumber               # signedNumberExpr
        | variable                   # variableExpr
        | '(' intExpr ')'            # parenExpr
        ;

boolExpr : intExpr relOp intExpr ;
     
mulDivOp : MUL_OP | DIV_OP | MOD_OP ;
addSubOp : ADD_OP | SUB_OP ;
relOp    : EQ_OP | NE_OP | LT_OP | LE_OP | GT_OP | GE_OP;
     
signedNumber : sign number ;
sign         : ADD_OP | SUB_OP ;

number : INTEGER    # integerConst
       ;

IF    : 'IF' ;
WHILE : 'WHILE' ;
PRINT : 'PRINT' ;

IDENTIFIER : [a-zA-Z][a-zA-Z0-9_]* ;
INTEGER    : [0-9]+ ;

MUL_OP : '*' ;
DIV_OP : '/' ;
MOD_OP : '%' ;
ADD_OP : '+' ;
SUB_OP : '-' ;

EQ_OP : '==' ;
NE_OP : '!=' ;
GT_OP : '>'  ;
GE_OP : '>=' ;
LT_OP : '<'  ;
LE_OP : '<=' ;

QUOTE  : '"' ;
STRING : QUOTE STRING_CHAR* QUOTE ;

NEWLINE : '\r'? '\n' -> skip  ;
WS      : [ \t]+ -> skip ; 

fragment STRING_CHAR : ~('"') ;  // any non-quote character
